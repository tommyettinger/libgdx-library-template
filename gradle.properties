# The daemon process must be disabled on Gradle 8.10.1; later versions can use it or not.
# We avoid using the daemon by default because it can improve startup times... sometimes.
org.gradle.daemon=false
# These defaults increase the default memory limits slightly, and try to make the
# encoding reliably UTF-8. Getting encoding to work with just this isn't always possible.
org.gradle.jvmargs=-Xms128m -Xmx512m -Dfile.encoding=UTF-8 -Dconsole.encoding=UTF-8
# Configure On Demand never works if Android projects are present; it should be off.
org.gradle.configureondemand=false
# The logging level determines which messages get shown about how Gradle itself is working, such as if build.gradle
# files are fully future-proof (which they never are, because Gradle constantly deprecates working APIs).
# You can change 'quiet' below to 'lifecycle' to use Gradle's default behavior, which shows some confusing messages.
# You could instead change 'quiet' below to 'info' to see info that's important mainly while debugging build files.
# Documented at: https://docs.gradle.org/current/userguide/command_line_interface.html#sec:command_line_logging
org.gradle.logging.level=quiet

# You can downgrade this for compatibility with older libGDX versions.
# The libGDX plugin from BlueBoxWare complains about libGDX 1.13.1 being outdated, but we want to avoid 1.13.5 because
#  it was rushed to satisfy Maven Central's unexpected publishing changes, and has serious issues on Android.
# suppress inspection "GDXOutdatedVersionGradleProperties"
gdxVersion=1.13.1
# Other library versions are typically specified here, such as this data structure library:
# jdkgdxdsVersion=1.11.0
# Some libraries may only be used from tests, like this one for writing animated GIFs:
# anim8Version=0.5.4

# This must match your Maven Central group if you publish there; otherwise,
# change this template to match your group ID.
GROUP=com.github.tommyettinger
# The name of the library, as it can be downloaded using Maven or Gradle.
POM_ARTIFACT_ID=libgdx-library-template
# This version should always be updated here; it is used elsewhere.
VERSION_NAME=0.0.1-SNAPSHOT

# The name of the library; might be different from POM_ARTIFACT_ID .
POM_NAME=libgdx-library-template
# Of course, you should change the description.
POM_DESCRIPTION=Change all of this! This is only a libgdx-library-template!
# This is probably not correct for a new project; 2021 is when the template
# was first made.
POM_INCEPTION_YEAR=2021

# Just change all this to use your GitHub or other URL.
POM_URL=https://github.com/tommyettinger/libgdx-library-template/
POM_SCM_URL=https://github.com/tommyettinger/libgdx-library-template/
POM_SCM_CONNECTION=scm:https://tommyettinger@github.com/tommyettinger/libgdx-library-template.git
POM_SCM_DEV_CONNECTION=scm:git://github.com/tommyettinger/libgdx-library-template.git

# This applies to the template itself; it does not apply to your library unless
# you choose it as the license for your library. Using CC0 means all code in your
# library was written by you/your team, or was already public-domain.
POM_LICENCE_NAME=Creative Commons Zero
POM_LICENCE_URL=https://creativecommons.org/publicdomain/zero/1.0/
POM_LICENCE_DIST=repo

# Another common option is the Apache License, which libGDX uses. It is considered
# a "business-friendly" permissive license, and allows commercial use.
## POM_LICENCE_NAME=The Apache Software License, Version 2.0
## POM_LICENCE_URL=https://www.apache.org/licenses/LICENSE-2.0.txt
## POM_LICENCE_DIST=repo

# Another option is the MIT License, which is very permissive. It also allows
# commercial use, and only requires any license headers to stay intact.
## POM_LICENCE_NAME=MIT License
## POM_LICENCE_URL=https://opensource.org/licenses/mit-license.php
## POM_LICENCE_DIST=repo

# Another option is the Eclipse Public License. It is very similar to the Apache
# License; it is also "business-friendly," permissive, and allows commercial use.
## POM_LICENCE_NAME=Eclipse Public License v 1.0
## POM_LICENCE_URL=http://www.eclipse.org/legal/epl-v10.html
## POM_LICENCE_DIST=repo

# I can't stop you from licensing your code as GPL, but I won't use it if you do.
# The GPL isn't compatible with most other licenses, and restricts code that uses
# a GPL library to also be GPL. The LGPL was created in an attempt to solve this
# library issue; still, it isn't preferable to Apache, EPL, MIT, or BSD in regard
# to license compatibility with existing Java libraries. Some purposes are a
# great fit for GPL, especially many core parts of Linux, and you may be required
# to use GPL because a library you need is GPL-licensed, but the GPL appears only
# rarely across most of the open-source Java ecosystem. OpenJDK, however, is
# licensed under the "GPL v2 with Classpath Exception," so there's that.

# Obviously, change this part of the template if you aren't Tommy Ettinger.
POM_DEVELOPER_ID=tommyettinger
POM_DEVELOPER_NAME=Tommy Ettinger
POM_DEVELOPER_URL=https://github.com/tommyettinger/

# These two lines allow uploading to Maven Central, if you want.
# You can use JitPack to handle releases and never touch Maven Central, or you can
# register with Sonatype to get a Maven Central "group" that you can push to.
# Maven Central can be a lot more work, but is the more "professional" and stable
# of the two options. Using DEFAULT will be discontinued after June 2025, and you
# must go through a migration (with a different token) on Maven Central's site to
# use CENTRAL_PORTAL instead, which is much faster to release with.
SONATYPE_HOST=CENTRAL_PORTAL
# If releasing to Maven Central, you should set this to true during the release
# process, and typically you will want to set it back to false before you tag
# a release on GitHub. This is because Maven Central needs signed JARs, but
# JitPack can't easily sign JARs using your keys, if it just built those JARs.
# If true, this needs GPG signing enabled; doing that has a learning curve...
RELEASE_SIGNING_ENABLED=false
