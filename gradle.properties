org.gradle.daemon=true
org.gradle.jvmargs=-Xms128m -Xmx512m -Dfile.encoding=UTF-8 -Dconsole.encoding=UTF-8
org.gradle.configureondemand=false
# You can downgrade this for compatibility with older libGDX versions.
gdxVersion=1.12.0

# This must match your Maven Central group if you publish there.
GROUP=com.github.tommyettinger
# The name of the library, as it can be downloaded using Maven or Gradle.
POM_ARTIFACT_ID=libgdx-library-template
# This version should always be updated here; it is used elsewhere.
VERSION_NAME=0.0.1-SNAPSHOT

# The name of the library; might be different from POM_ARTIFACT_ID .
POM_NAME=libgdx-library-template
POM_DESCRIPTION=Change all of this! This is only a libgdx-library-template!
# This is probably not correct for a new project; 2021 is when the template
# was first made.
POM_INCEPTION_YEAR=2021

# Just change all this to use your GitHub or other URL.
POM_URL=https://github.com/tommyettinger/libgdx-library-template/
POM_SCM_URL=https://github.com/tommyettinger/libgdx-library-template/
POM_SCM_CONNECTION=scm:https://tommyettinger@github.com/tommyettinger/libgdx-library-template.git
POM_SCM_DEV_CONNECTION=scm:git://github.com/tommyettinger/libgdx-library-template.git

# This applies to the template itself; it does not apply to your library unless
# you choose it as the license for your library. Using CC0 means all code in your
# library was written by you, or was already public-domain.
POM_LICENCE_NAME=Creative Commons Zero
POM_LICENCE_URL=https://creativecommons.org/publicdomain/zero/1.0/
POM_LICENCE_DIST=repo

# Another common option is the Apache License, which libGDX uses. It is considered
# a "business-friendly" permissive license, and allows commercial use.
## POM_LICENCE_NAME=The Apache Software License, Version 2.0
## POM_LICENCE_URL=https://www.apache.org/licenses/LICENSE-2.0.txt
## POM_LICENCE_DIST=repo

# Another option is the MIT License, which is very permissive. It also allows
# commercial use, and only requires any license headers to stay intact.
## POM_LICENCE_NAME=MIT License
## POM_LICENCE_URL=https://opensource.org/licenses/mit-license.php
## POM_LICENCE_DIST=repo

# Another option is the Eclipse Public License. It is very similar to the Apache
# License; it is also "business-friendly," permissive, and allows commercial use.
## POM_LICENCE_NAME=Eclipse Public License v 1.0
## POM_LICENCE_URL=http://www.eclipse.org/legal/epl-v10.html
## POM_LICENCE_DIST=repo

# I can't stop you from licensing your code as GPL, but I won't use it if you do.
# The GPL isn't compatible with most other licenses, and restricts code that uses
# a GPL library to also be GPL. The LGPL was created in an attempt to solve this
# library issue; still, it isn't preferable to Apache, EPL, MIT, or BSD in regard
# to license compatibility with existing Java libraries.

# Obviously, change this part of the template if you aren't Tommy Ettinger.
POM_DEVELOPER_ID=tommyettinger
POM_DEVELOPER_NAME=Tommy Ettinger
POM_DEVELOPER_URL=https://github.com/tommyettinger/

# These two lines allow uploading to Maven Central, if you want.
# You can use JitPack to handle releases and never touch Maven Central, or you can
# register with Sonatype to get a Maven Central "group" that you can push to.
# Maven Central can be a lot more work, but is the more "professional" and stable
# of the two options.
SONATYPE_HOST=DEFAULT
# Note: if you make a GitHub release, JitPack will try to build it, but it won't be
# able to if RELEASE_SIGNING_ENABLED is true. However, Maven Central needs
# RELEASE_SIGNING_ENABLED to be true in order to accept a stable release. What you
# can do is temporarily set this variable to true when running the "publish" and
# "closeAndReleaseRepository" tasks, then set it to false, commit, and release.
# This allows both Maven Central and JitPack to build successfully.
RELEASE_SIGNING_ENABLED=false
